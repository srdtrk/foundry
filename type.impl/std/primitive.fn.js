(function() {
    var type_impls = Object.fromEntries([["cast",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Finalize-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-Finalize-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; Finalize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.finalize\" class=\"method trait-impl\"><a href=\"#method.finalize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">finalize</a>(&amp;self)</h4></section></summary><div class='docblock'>Cleanup logic for a type.</div></details></div></details>","Finalize","cast::revm::precompile::PrecompileFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Trace-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-Trace-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; Trace for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace\" class=\"method trait-impl\"><a href=\"#method.trace\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">trace</a>(&amp;self, _tracer: &amp;mut Tracer)</h4></section></summary><div class='docblock'>Marks all contained <code>Gc</code>s. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace_non_roots\" class=\"method trait-impl\"><a href=\"#method.trace_non_roots\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">trace_non_roots</a>(&amp;self)</h4></section></summary><div class='docblock'>Trace handles located in GC heap, and mark them as non root. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_finalizer\" class=\"method trait-impl\"><a href=\"#method.run_finalizer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_finalizer</a>(&amp;self)</h4></section></summary><div class='docblock'>Runs [<code>Finalize::finalize</code>] on this object and all\ncontained subobjects.</div></details></div></details>","Trace","cast::revm::precompile::PrecompileFn"],["<section id=\"impl-JsData-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-JsData-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; JsData for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section>","JsData","cast::revm::precompile::PrecompileFn"],["<section id=\"impl-ZeroableInOption-for-fn(A,+B)+-%3E+R\" class=\"impl\"><a href=\"#impl-ZeroableInOption-for-fn(A,+B)+-%3E+R\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, R&gt; ZeroableInOption for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; R</h3></section>","ZeroableInOption","cast::revm::precompile::PrecompileFn"]]],["forge",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Finalize-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-Finalize-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; Finalize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.finalize\" class=\"method trait-impl\"><a href=\"#method.finalize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">finalize</a>(&amp;self)</h4></section></summary><div class='docblock'>Cleanup logic for a type.</div></details></div></details>","Finalize","forge::revm::precompile::PrecompileFn"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Trace-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-Trace-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; Trace for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace\" class=\"method trait-impl\"><a href=\"#method.trace\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">trace</a>(&amp;self, _tracer: &amp;mut Tracer)</h4></section></summary><div class='docblock'>Marks all contained <code>Gc</code>s. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace_non_roots\" class=\"method trait-impl\"><a href=\"#method.trace_non_roots\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">trace_non_roots</a>(&amp;self)</h4></section></summary><div class='docblock'>Trace handles located in GC heap, and mark them as non root. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_finalizer\" class=\"method trait-impl\"><a href=\"#method.run_finalizer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">run_finalizer</a>(&amp;self)</h4></section></summary><div class='docblock'>Runs [<code>Finalize::finalize</code>] on this object and all\ncontained subobjects.</div></details></div></details>","Trace","forge::revm::precompile::PrecompileFn"],["<section id=\"impl-JsData-for-fn(A,+B)+-%3E+Ret\" class=\"impl\"><a href=\"#impl-JsData-for-fn(A,+B)+-%3E+Ret\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ret, A, B&gt; JsData for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; Ret</h3></section>","JsData","forge::revm::precompile::PrecompileFn"],["<section id=\"impl-ZeroableInOption-for-fn(A,+B)+-%3E+R\" class=\"impl\"><a href=\"#impl-ZeroableInOption-for-fn(A,+B)+-%3E+R\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, R&gt; ZeroableInOption for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.fn.html\">fn</a>(A, B) -&gt; R</h3></section>","ZeroableInOption","forge::revm::precompile::PrecompileFn"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[3253,3259]}